(ns advent-2019.day-7
  (:require [advent-2019.day-2 :as d2]
            [advent-2019.day-5 :as d5]
            [clojure.math.combinatorics :as combo]))

(def parse d2/parse)

(defn amplify [prog phase-sequence]
  (reduce (fn [in phase]
            (d5/final-output prog
                             [phase in]))
          0
          phase-sequence))

(defn part-1 [in]
  (reduce max
          (map (partial amplify (parse in))
               (combo/permutations (range 5)))))

(defn amplify* [prog phase-sequence]
  (ffirst (filter (comp empty? second)
                  (iterate (fn [[in [s & states]]]
                             (let [{rs :state
                                    [out] :out :as res}
                                   (d5/last-state (-> s
                                                      (update :in conj in)
                                                      (assoc :state :running)))]
                               [out (concat states
                                            (when (= rs :suspended)
                                              [(assoc res
                                                 :in []
                                                 :out [])]))]))
                           [0 (map (fn [phase]
                                     {:state :running
                                      :prog prog
                                      :pnt 0
                                      :in [phase]
                                      :out []})
                                   phase-sequence)]))))

(defn part-2 [in]
  (reduce max
          (map (partial amplify* (parse in))
               (combo/permutations (range 5 10)))))


(comment
  (part-1 "3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0")

  (part-1 "3,23,3,24,1002,24,10,24,1002,23,-1,23,101,5,23,23,1,24,23,23,4,23,99,0,0")

  (part-1 "3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0")

  (amplify [3, 23, 3, 24, 1002, 24, 10, 24, 1002, 23, -1, 23,
            101, 5, 23, 23, 1, 24, 23, 23, 4, 23, 99, 0, 0]
           [0, 1, 2, 3, 4])

  (amplify* [3, 26, 1001, 26, -4, 26, 3, 27, 1002, 27, 2, 27, 1, 27, 26,
             27, 4, 27, 1001, 28, -1, 28, 1005, 28, 6, 99, 0, 0, 5]
            [9, 8, 7, 6, 5])

  (part-2 "3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5")

  (part-2 "3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10")

  (part-2 "3,8,1001,8,10,8,105,1,0,0,21,38,47,64,85,106,187,268,349,430,99999,3,9,1002,9,4,9,1001,9,4,9,1002,9,4,9,4,9,99,3,9,1002,9,4,9,4,9,99,3,9,1001,9,3,9,102,5,9,9,1001,9,5,9,4,9,99,3,9,101,3,9,9,102,5,9,9,1001,9,4,9,102,4,9,9,4,9,99,3,9,1002,9,3,9,101,2,9,9,102,4,9,9,101,2,9,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,101,2,9,9,4,9,3,9,101,1,9,9,4,9,99,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,101,1,9,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,102,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,101,2,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1002,9,2,9,4,9,99,3,9,1002,9,2,9,4,9,3,9,101,1,9,9,4,9,3,9,102,2,9,9,4,9,3,9,1001,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,1002,9,2,9,4,9,3,9,1001,9,1,9,4,9,3,9,102,2,9,9,4,9,99"))
